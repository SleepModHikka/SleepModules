
#meta developer: @sleep_modules
from .. import loader, utils
from asyncio import sleep
from telethon.tl.functions.messages import GetHistoryRequest
import re
import logging
from ..inline.types import InlineCall

@loader.tds
class LimitsShopCfg(loader.Module):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –ª–∏–º–∏—Ç–æ–≤"""
    strings_en = {
        'name': 'LimitsShopCfg',
        'main_text': '<emoji document_id=5870478797593120516>üíµ</emoji> <b>Config to Limits Shop</b>',
        'status': '<emoji document_id=5870982283724328568>‚öô</emoji> <b>Status:</b>',
        'limits_status_yes': '<emoji document_id=5870633910337015697>‚úÖ</emoji> <b>Send limits</b>',
        'limits_status_no': '<emoji document_id=5870657884844462243>‚ùå</emoji> <b>Don\'t send limits</b>',
        'queue': '<emoji document_id=5870772616305839506>üë•</emoji> <b>Queue, format: nickname -> quantity limits</b>',
        'lvl_limit': '<emoji document_id=5870730156259152122>üòÄ</emoji> <b>Level limit:</b>',
        'my_nick': '<emoji document_id=5870994129244131212>üë§</emoji> <b>My nickname:</b>',
        'status_changed': '<b>Status changed to:</b> <code>{}</code>',
        'queue_added': '<b>Queue added:</b> <code>{}</code>',
        'queue_message': '<b>Current Queue:</b>\n<code>{}</code>',
        'no_queue': '<b>No queue</b>',
        'level_limit_set': '<b>Level limit set to:</b> <code>{}</code>',
        'nickname_set': '<b>Nickname set to:</b> <code>{}</code>',
        'status_button_yes': '‚úÖ Send Limits',
        'status_button_no': '‚ùå Don\'t Send Limits',
        'level_limit_button': 'üòÄ Set Level Limit',
        'nickname_button': 'üë§ Set Nickname',
        'queue_button': 'üë• Manage Queue',
        'close_button': 'üîª Close',
        'invalid_usage': '<b>Invalid usage. See <code>.help setin</code></b>',
        'level_limit_invalid': '<b>Invalid level format</b>',
        'nickname_invalid': '<b>Nickname must be a single word</b>',
        'queue_add_invalid': '<b>Usage: <code>setin addque {nick} {limit}</code></b>',
        'queue_del_invalid': '<b>Usage: <code>setin delque {nick}</code></b>',
        'queue_deleted': '<b>User deleted from queue</b>',
        'status_changed_msg': '<b>Limits sending status changed</b>'
    }

    strings_ru = {
        'name': 'LimitsShopCfg',
        'main_text': '<emoji document_id=5870478797593120516>üíµ</emoji> <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –ª–∏–º–∏—Ç–æ–≤</b>',
        'status': '<emoji document_id=5870982283724328568>‚öô</emoji> <b>–°—Ç–∞—Ç—É—Å:</b>',
        'limits_status_yes': '<emoji document_id=5870633910337015697>‚úÖ</emoji> <b>–û—Ç–ø—Ä–∞–≤–ª—è—é –ª–∏–º–∏—Ç—ã</b>',
        'limits_status_no': '<emoji document_id=5870657884844462243>‚ùå</emoji> <b>–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é –ª–∏–º–∏—Ç—ã</b>',
        'queue': '<emoji document_id=5870772616305839506>üë•</emoji> <b>–û—á–µ—Ä–µ–¥—å, –§–æ—Ä–º–∞—Ç: –Ω–∏–∫–Ω–µ–π–º -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–º–∏—Ç–æ–≤</b>',
        'lvl_limit': '<emoji document_id=5870730156259152122>üòÄ</emoji> <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:</b>',
        'my_nick': '<emoji document_id=5870994129244131212>üë§</emoji> <b>–ú–æ–π –Ω–∏–∫:</b>',
        'status_changed': '<b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞:</b> <code>{}</code>',
        'queue_added': '<b>–û—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b> <code>{}</code>',
        'queue_message': '<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:</b>\n<code>{}</code>',
        'no_queue': '<b>–ù–µ—Ç –æ—á–µ—Ä–µ–¥–∏</b>',
        'level_limit_set': '<b>–£—Ä–æ–≤–µ–Ω—å –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> <code>{}</code>',
        'nickname_set': '<b>–ù–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> <code>{}</code>',
        'status_button_yes': '‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏–º–∏—Ç—ã',
        'status_button_no': '‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏–º–∏—Ç—ã',
        'level_limit_button': 'üòÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—Ä–æ–≤–Ω—è',
        'nickname_button': 'üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º',
        'queue_button': 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é',
        'close_button': 'üîª –ó–∞–∫—Ä—ã—Ç—å',
        'invalid_usage': '<b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –°–º–æ—Ç—Ä–∏—Ç–µ <code>.help setin</code></b>',
        'level_limit_invalid': '<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω—è</b>',
        'nickname_invalid': '<b>–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º</b>',
        'queue_add_invalid': '<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>setin addque {–Ω–∏–∫} {–ª–∏–º–∏—Ç}</code></b>',
        'queue_del_invalid': '<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>setin delque {–Ω–∏–∫}</code></b>',
        'queue_deleted': '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏</b>',
        'status_changed_msg': '<b>–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω</b>'
    }

    async def client_ready(self, client, db):
        if self.get('current_status') is None:
            self.set('current_status', 'limits_status_yes')
            logging.info("LimitsShopCfg: Initialized current_status to limits_status_yes")
        if self.get('level_limit') is None:
            self.set('level_limit', 0)
            logging.info("LimitsShopCfg: Initialized level_limit to 0")
        if self.get('nickname') is None:
            self.set('nickname', 'NoNick')
            logging.info("LimitsShopCfg: Initialized nickname to NoNick")

        if self.get('queue') is None:
            self.set('queue', [])
            logging.info("LimitsShopCfg: Initialized queue to []")

    @loader.command(ru_doc="[lvl|nick|addque|delque|status] [–∑–Ω–∞—á–µ–Ω–∏–µ] - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    async def setin(self, message):
        """[lvl|nick|addque|delque|status] [value] - Configure settings"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit(self.strings['invalid_usage'])
            return

        parts = args.split()
        action = parts[0].lower()

        if action == "lvl":
            if len(parts) != 2:
                await message.edit(self.strings['invalid_usage'])
                return
            try:
                level_limit = int(parts[1])
                self.set('level_limit', level_limit)
                await message.edit(self.strings['level_limit_set'].format(level_limit))
            except ValueError:
                await message.edit(self.strings['level_limit_invalid'])
        elif action == "nick":
            if len(parts) != 2:
                await message.edit(self.strings['invalid_usage'])
                return

            nickname = parts[1]
            if len(nickname.split()) > 1:
                await message.edit(self.strings['nickname_invalid'])
                return

            self.set('nickname', nickname)
            await message.edit(self.strings['nickname_set'].format(nickname))
        elif action == "addque":
            if len(parts) != 3:
                await message.edit(self.strings['queue_add_invalid'])
                return

            text = parts[1]
            numbers = parts[2]
            new_queue_item = f"{text} {numbers}"

            queue = self.get('queue', [])
            queue.append(new_queue_item)
            self.set('queue', queue)

            await message.edit(self.strings['queue_added'].format(new_queue_item))

        elif action == "delque":
            if len(parts) != 2:
                await message.edit(self.strings['queue_del_invalid'])
                return

            text_to_remove = parts[1]
            queue = self.get('queue', [])
            new_queue = [item for item in queue if text_to_remove not in item]
            self.set('queue', new_queue)

            await message.edit(self.strings['queue_deleted'])
        
        elif action == "status":
            current_status = self.get('current_status')
            new_status = "limits_status_no" if current_status == "limits_status_yes" else "limits_status_yes"
            self.set('current_status', new_status)
            await message.edit(self.strings['status_changed_msg'])

        else:
            await message.edit(self.strings['invalid_usage'])

    @loader.command()
    async def lcfg(self, message):
        """- –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –ª–∏–º–∏—Ç–æ–≤"""
        current_status = self.get('current_status')
        status_text = self.strings[current_status]

        queue = self.get('queue', [])
        queue_text = "\n".join(queue) if queue else self.strings['no_queue']
        level_limit = self.get('level_limit')
        nickname = self.get('nickname')

        await message.edit(
            f"{self.strings['main_text']}\n\n{self.strings['status']} {status_text}\n\n{self.strings['queue']}\n{queue_text}\n\n{self.strings['lvl_limit']} {level_limit}\n\n{self.strings['my_nick']} {nickname}"
        )

    @loader.command()
    async def ilcfg(self, message):
        """- –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        current_status = self.get('current_status')
        status_text = self.strings[current_status]

        queue = self.get('queue', [])
        queue_text = "\n".join(queue) if queue else self.strings['no_queue']
        level_limit = self.get('level_limit')
        nickname = self.get('nickname')
        
        text = f"{self.strings['main_text']}\n\n{self.strings['status']} {status_text}\n\n{self.strings['queue']}\n{queue_text}\n\n{self.strings['lvl_limit']} {level_limit}\n\n{self.strings['my_nick']} {nickname}"

        await self.inline.form(
            text=text,
            message=message,
            reply_markup=[
                [
                    {
                        'text': self.strings['status_button_yes'] if self.get('current_status') == 'limits_status_no' else self.strings['status_button_no'],
                        'callback': self.set_status_callback
                    },
                ],
                [
                    {
                        'text': self.strings['level_limit_button'],
                        'callback': self.set_level_limit_callback
                    },
                ],
                [
                    {
                        'text': self.strings['nickname_button'],
                        'callback': self.set_nickname_callback
                    },
                ],
                [
                    {
                        'text': self.strings['queue_button'],
                        'callback': self.manage_queue_callback
                    },
                ],
                [
                    {
                        'text': self.strings['close_button'],
                        'action': 'close'
                    },
                ]
            ]
        )

    async def set_status_callback(self, call: InlineCall):
        """- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        current_status = self.get('current_status')
        new_status = "limits_status_no" if current_status == "limits_status_yes" else "limits_status_yes"
        self.set('current_status', new_status)

        current_status = self.get('current_status')
        status_text = self.strings[current_status]

        queue = self.get('queue', [])
        queue_text = "\n".join(queue) if queue else self.strings['no_queue']
        level_limit = self.get('level_limit')
        nickname = self.get('nickname')
        
        text = f"{self.strings['main_text']}\n\n{self.strings['status']} {status_text}\n\n{self.strings['queue']}\n{queue_text}\n\n{self.strings['lvl_limit']} {level_limit}\n\n{self.strings['my_nick']} {nickname}"

        await call.edit(
            text=text,
            reply_markup=[
                [
                    {
                        'text': self.strings['status_button_yes'] if self.get('current_status') == 'limits_status_no' else self.strings['status_button_no'],
                        'callback': self.set_status_callback
                    },
                ],
                [
                    {
                        'text': self.strings['level_limit_button'],
                        'callback': self.set_level_limit_callback
                    },
                ],
                [
                    {
                        'text': self.strings['nickname_button'],
                        'callback': self.set_nickname_callback
                    },
                ],
                [
                    {
                        'text': self.strings['queue_button'],
                        'callback': self.manage_queue_callback
                    },
                ],
                [
                    {
                        'text': self.strings['close_button'],
                        'action': 'close'
                    },
                ]
            ]
        )
        await call.answer(self.strings['status_changed_msg'])

    async def set_level_limit_callback(self, call: InlineCall):
        """- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—Ä–æ–≤–Ω—è"""
        await call.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setin lvl {—É—Ä–æ–≤–µ–Ω—å}", show_alert=True)

    async def set_nickname_callback(self, call: InlineCall):
        """- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞"""
        await call.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setin nick {–Ω–∏–∫–Ω–µ–π–º}", show_alert=True)

    async def manage_queue_callback(self, call: InlineCall):
        """- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é"""
        await call.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã\n .setin addque {–Ω–∏–∫} {–∫–æ–ª-–≤–æ –ª–∏–º–∏—Ç–æ–≤} - –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n .setin delque {–Ω–∏–∫} - —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
